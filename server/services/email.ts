import sgMail from '@sendgrid/mail';

if (!process.env.SENDGRID_API_KEY) {
  console.warn("SENDGRID_API_KEY environment variable is not set");
} else {
  sgMail.setApiKey(process.env.SENDGRID_API_KEY);
}

export interface EmailOptions {
  to: string;
  subject: string;
  content: string;
  contentType?: 'html' | 'text';
}

export async function sendEmail(options: EmailOptions): Promise<void> {
  if (!process.env.SENDGRID_API_KEY) {
    throw new Error("SendGrid API key is not configured");
  }

  const { to, subject, content, contentType = 'html' } = options;
  
  const msg = {
    to,
    from: 'noreply@docmathai.app', // This should be a verified sender in SendGrid
    subject,
    ...(contentType === 'html' ? { html: content } : { text: content }),
  };

  try {
    await sgMail.send(msg);
    console.log(`Email sent successfully to ${to}`);
  } catch (error) {
    console.error('SendGrid error:', error);
    throw new Error('Failed to send email via SendGrid');
  }
}

export async function sendResponseEmail(content: string, userEmail: string, timestamp?: string): Promise<void> {
  const formattedContent = formatContentForEmail(content);
  
  await sendEmail({
    to: userEmail,
    subject: 'AI Response from DocMath AI',
    content: `
      <div style="font-family: Georgia, 'Times New Roman', serif; line-height: 1.7; max-width: 800px; margin: 0 auto; padding: 30px; background-color: #ffffff;">
        <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #2563eb; padding-bottom: 20px;">
          <h1 style="color: #2563eb; margin: 0; font-size: 28px; font-weight: bold;">
            AI Response - DocMath AI
          </h1>
          ${timestamp ? `<p style="color: #6b7280; font-size: 14px; margin: 10px 0 0 0; font-style: italic;">Generated on: ${new Date(timestamp).toLocaleString()}</p>` : ''}
        </div>
        
        <div style="margin: 30px 0; padding: 20px; background-color: #f8f9fa; border-radius: 8px; border-left: 4px solid #2563eb;">
          ${formattedContent}
        </div>
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center;">
          <p style="color: #6b7280; font-size: 14px; margin: 0;">
            This response was generated by <strong>DocMath AI</strong><br>
            Mathematical notation and formatting have been preserved in this email.
          </p>
        </div>
      </div>
    `,
    contentType: 'html'
  });
}

// Helper function to format content for email
function formatContentForEmail(content: string): string {
  let formattedContent = content;
  
  // Convert paragraph breaks to proper HTML paragraphs
  const paragraphs = formattedContent.split(/\n\s*\n/);
  formattedContent = paragraphs
    .map(paragraph => {
      let processedParagraph = paragraph.replace(/\n/g, ' ').trim();
      if (processedParagraph.length > 0) {
        return `<p style="margin-bottom: 1em; font-size: 16px; color: #333; text-align: justify;">${processedParagraph}</p>`;
      }
      return '';
    })
    .filter(p => p.length > 0)
    .join('');
  
  // Enhanced math rendering for email
  // Block math: $$...$$
  formattedContent = formattedContent.replace(/\$\$([^$]+)\$\$/g, (match, expr) => {
    const cleanExpr = expr.trim();
    return `<div style="text-align: center; font-family: 'Times New Roman', serif; font-style: italic; margin: 1.5em 0; padding: 1em; background: #f0f4f8; border-radius: 8px; border: 1px solid #d1e7dd; font-size: 18px;">${cleanExpr}</div>`;
  });
  
  // Inline math: $...$
  formattedContent = formattedContent.replace(/\$([^$\n]+)\$/g, (match, expr) => {
    const cleanExpr = expr.trim();
    return `<span style="font-family: 'Times New Roman', serif; font-style: italic; background: #f0f4f8; padding: 2px 6px; border-radius: 4px; border: 1px solid #d1e7dd;">${cleanExpr}</span>`;
  });
  
  return formattedContent;
}